There are two ways how we think registration can be done:
1. First - store a person's data in their document. One account - one role. In this case, registration endpoints will look like this:
POST: /users/register - registration
POST: /chefs/register - registration
POST /couriers/register - registration
POST /admins/register - registration

2. Second - store a person's data and role in a separate collection. Store specific role data in other collections (users, chefs, couriers, admins). One account - several roles. In this case, the registration endpoint will look like this:
POST: /auth/register -  registration

The endpoints below will have the same logic for all roles:
POST: /auth/login - enter to account
POST: /auth/logout - exit from account
POST: /auth/forgot-password - request to change password
POST: /auth/reset-password - password reset

/************/

USER ENDPOINTS:

GET: /users - get all users' info
GET: /users/:userId - get user's info
PATCH: /users/:userId - update user's info
DELETE: /users/:userId - delete user's account

GET: /dishes - get a list of dishes
GET: /dishes/:dishId - get dish information
GET: /dishes/popular - get popular dishes
GET: /dishes/random - get some random dish

GET: /chefs - get all chefs

GET: /users/:userId/favourites/:type - get user's favourite dishes or chefs
POST, DELETE:
/users/:userId/favourites/:type - add/delete the dish to favourites (passing dishId)
/users/:userId/favourites/:type - add/delete the chef to favourites (passing chefId)

**team decided to store the cart data on the server so that it can be accessed when logging in from different devices, and update it using debouncing:
GET: /users/:userId/cart - get the cart info
POST: /users/:userId/cart - add the dish to the cart (passing dishId)
PATCH: /users/:userId/cart - update information about the dish in the cart (passing dishId)
DELETE: /users/:userId/cart  - delete the dish from the cart (passing dishId)

**notifications will not be saved on the server

GET: /orders/own - get user's orders list
GET: /orders/:orderId - get a particular order
POST: /orders - add a new order to user's orders list
PATCH: /orders/:orderId - update the particular order UNTIL the chef approves it

/************/

CHEF ENDPOINTS:

GET: /chefs/:chefId - get chef's info
PATCH: /chefs/:chefId - update chef's info
DELETE: /chefs/:chefId - delete chef's account

GET: /dishes/own - get all dishes of this chef
GET: /dishes/:dishId - get a particular dish
POST: /dishes - create a new dish of this chef
PATCH: /dishes/:dishId - update a particular dish of this chef
DELETE: /dishes/:dishId - delete a particular dish of this chef

**notifications will not be saved on the server

GET: /orders/own?status=(new, completed, canceled) - get chef's all orders
GET: /orders/:orderId - get a particular order
PATCH: /orders/:orderId - update status of this order


/************/

COURIER ENDPOINTS:

GET: /couriers?status=(active) - get the list of all delivery persons, sorted by distance and availability based on delivery person's current location and other factors

GET: /couriers/:courierId - get delivery person information
DELETE: /couriers/:courierId - delete delivery person account
PATCH: /couriers/:courierId - update delivery profile info: toggle 'ready for work' status (active / not active), update 'current location' when active, update personal info

GET: /orders/own?status=(new, completed, canceled) - get info about all orders details according to their status
PATCH: /orders/:orderId - update status of the order

**notifications will not be saved on the server

/************/

ADMIN ENDPOINTS:

GET: /users - get all users' info
GET: /users/:userId - get user's info
PATCH: /users/:userId - update user's info
DELETE: /users/:userId - delete user's account

GET: /chefs - get all chefs' info
GET: /chefs/:chefId - get chef's info
PATCH: /chefs/:chefId - update chef's info
DELETE: /chefs/:chefId - delete chef's account

GET: /couriers  - get all delivery persons' info
GET: /couriers/:courierId - get a particular delivery person
PATCH: /couriers/:courierId  - update a particular delivery person
DELETE: /couriers/:courierId  - delete a particular delivery person

GET: /dishes - get all dishes info
GET: /dishes/:dishId - get a particular dish
PATCH: /dishes/:dishId - update a particular dish
DELETE: /dishes/:dishId - delete a particular dish

GET: /orders - get all orders info
GET: /orders/:orderId - get a particular order
PATCH: /orders/:orderId - update a particular order
DELETE: /order/:orderId - delete a particular order

**notifications will not be saved on the server
POST: /notifications - create new notification (messages about technical work, policy updates, new features etc.)

GET: /orders/stats - get statistics about orders
GET: /chefs/stats - get statistics about chefs
GET: /couriers/stats - get statistics about delivery persons
GET: /users/stats - get statistics about users
GET: /revenue/stats - calculate how much was purchased through the app

/************/

REVIEW ENDPOINTS:

There are two ways how we can show reviews (reviews are available for users, chefs and admins (to delete the comment)). Which one would you recommend:
1. As reviews array of the dish document
GET: /dishes/:dishId/reviews - get comments to this dish
POST: /dishes/:dishId/reviews - update person's comment to this dish
PATCH: /dishes/:dishId/reviews/:reviewId - update person's comment to this dish
DELETE: /dishes/:dishId/reviews/:reviewId - delete person's comment to this dish

2. As a separate collection
GET: /reviews/by-chef/:chefId - get all comments related to a particular chef's dishes
GET: /reviews/by-dish/:dishId - get all comments of the dishes
POST: /reviews - create a new comment to this dish
PATCH: /reviews/:reviewId - update person's comment to this dish
DELETE: /reviews/:reviewId - delete person's comment to this dish

/************/

QUESTIONS

The issue regarding payment and implementation of money transfers is a difficult one for us due to the lack of experience in this topic among the whole team, so it would be great to have a meeting with mentors regarding this issue
